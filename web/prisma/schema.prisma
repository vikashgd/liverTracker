generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  profile       PatientProfile?
  reportFiles   ReportFile[]
  sessions      Session[]
  timeline      TimelineEvent[]
}

model PatientProfile {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  dateOfBirth              DateTime?
  gender                   String?
  height                   Float?
  weight                   Float?
  onDialysis               Boolean   @default(false)
  dialysisSessionsPerWeek  Int?
  dialysisStartDate        DateTime?
  dialysisType             String?
  liverDiseaseType         String?
  diagnosisDate            DateTime?
  transplantCandidate      Boolean   @default(false)
  transplantListDate       DateTime?
  alcoholUse               String?
  smokingStatus            String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  primaryPhysician         String?
  hepatologist             String?
  transplantCenter         String?
  preferredUnits           String    @default("US")
  timezone                 String    @default("UTC")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  completedAt              DateTime?
  ascites                  String?   @default("none")
  encephalopathy           String?   @default("none")
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ReportFile {
  id            String            @id @default(cuid())
  userId        String
  objectKey     String
  contentType   String
  reportType    String?
  reportDate    DateTime?
  createdAt     DateTime          @default(now())
  extractedJson Json?
  metrics       ExtractedMetric[]
  user          User              @relation(fields: [userId], references: [id])
  events        TimelineEvent[]
}

model ExtractedMetric {
  id        String     @id @default(cuid())
  reportId  String
  name      String
  value     Float?
  unit      String?
  createdAt DateTime   @default(now())
  category  String?
  textValue String?
  report    ReportFile @relation(fields: [reportId], references: [id])
}

model TimelineEvent {
  id         String      @id @default(cuid())
  userId     String
  type       String
  reportId   String?
  details    Json?
  occurredAt DateTime    @default(now())
  report     ReportFile? @relation(fields: [reportId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}
