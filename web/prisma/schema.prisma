// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  reportFiles   ReportFile[]
  timeline      TimelineEvent[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ReportFile {
  id             String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  objectKey      String
  contentType    String
  reportType     String?
  reportDate     DateTime?
  createdAt      DateTime          @default(now())
  extractedJson  Json?
  metrics        ExtractedMetric[]
  events         TimelineEvent[]
}

model ExtractedMetric {
  id           String      @id @default(cuid())
  reportId     String
  report       ReportFile  @relation(fields: [reportId], references: [id])
  name         String
  value        Float?
  textValue    String?
  unit         String?
  category     String?
  createdAt    DateTime    @default(now())
}

model TimelineEvent {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  type       String
  reportId   String?
  report     ReportFile? @relation(fields: [reportId], references: [id])
  details    Json?
  occurredAt DateTime   @default(now())
}
