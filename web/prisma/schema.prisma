generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  profile       PatientProfile?
  reportFiles   ReportFile[]
  sessions      Session[]
  timeline      TimelineEvent[]
  pdfExports    PdfExport[]
  auditLogs     AuditLog[]
}

model PatientProfile {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  dateOfBirth              DateTime?
  gender                   String?
  height                   Float?
  weight                   Float?
  onDialysis               Boolean   @default(false)
  dialysisSessionsPerWeek  Int?
  dialysisStartDate        DateTime?
  dialysisType             String?
  liverDiseaseType         String?
  diagnosisDate            DateTime?
  transplantCandidate      Boolean   @default(false)
  transplantListDate       DateTime?
  alcoholUse               String?
  smokingStatus            String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  primaryPhysician         String?
  hepatologist             String?
  transplantCenter         String?
  preferredUnits           String    @default("US")
  timezone                 String    @default("UTC")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  completedAt              DateTime?
  ascites                  String?   @default("none")
  encephalopathy           String?   @default("none")
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ReportFile {
  id            String            @id @default(cuid())
  userId        String
  objectKey     String
  contentType   String
  reportType    String?
  reportDate    DateTime?
  createdAt     DateTime          @default(now())
  extractedJson Json?
  metrics       ExtractedMetric[]
  user          User              @relation(fields: [userId], references: [id])
  events        TimelineEvent[]
}

model ExtractedMetric {
  id        String     @id @default(cuid())
  reportId  String
  name      String
  
  // Standardized values (primary data)
  value     Float?     // Converted to standard units
  unit      String?    // Standard unit
  
  // Original values (audit trail)
  originalValue     Float?     // Original extracted value
  originalUnit      String?    // Original unit from source
  
  // Conversion metadata
  wasConverted      Boolean    @default(false)
  conversionFactor  Float?     // Factor used for conversion
  conversionRule    String?    // Rule identifier used
  conversionDate    DateTime?  // When conversion was applied
  
  // Existing fields
  createdAt         DateTime   @default(now())
  category          String?
  textValue         String?
  
  // Quality assurance
  validationStatus  String?    // "valid", "suspicious", "error"
  validationNotes   String?    // Details about validation
  
  report            ReportFile @relation(fields: [reportId], references: [id])
}

model TimelineEvent {
  id         String      @id @default(cuid())
  userId     String
  type       String
  reportId   String?
  details    Json?
  occurredAt DateTime    @default(now())
  report     ReportFile? @relation(fields: [reportId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model ReportType {
  id          String       @id @default(cuid())
  name        String       @unique // e.g., "Blood Test", "Ultrasound", "CT Scan"
  category    String       // e.g., "Laboratory", "Imaging", "Clinical"
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PdfExport {
  id          String    @id @default(cuid())
  userId      String
  objectKey   String    // GCS object key for the generated PDF
  title       String    // e.g., "Health Summary - Dec 2024"
  dateRange   String?   // e.g., "Jan 2024 - Dec 2024"
  reportIds   String[]  // Array of report IDs included in export
  createdAt   DateTime  @default(now())
  expiresAt   DateTime? // Optional expiration for shared links
  accessCount Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  // Null for system actions
  action      String   // e.g., "file_upload", "data_export", "report_view"
  resourceType String  // e.g., "ReportFile", "ExtractedMetric", "PdfExport"
  resourceId  String?  // ID of the affected resource
  details     Json?    // Additional context (IP, user agent, etc.)
  timestamp   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])
}
