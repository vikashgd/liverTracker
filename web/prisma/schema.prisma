generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Test comment to trigger change detection

model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  
  // Onboarding tracking fields
  onboardingCompleted     Boolean   @default(false)
  onboardingStep          String?   // Current step: 'profile', 'first-upload', 'data-review', 'complete'
  profileCompleted        Boolean   @default(false)
  firstReportUploaded     Boolean   @default(false)
  secondReportUploaded    Boolean   @default(false)
  onboardingCompletedAt   DateTime?
  
  accounts      Account[]
  auditLogs     AuditLog[]
  profile       PatientProfile?
  pdfExports    PdfExport[]
  reportFiles   ReportFile[]
  sessions      Session[]
  shareLinks    ShareLink[]
  timeline      TimelineEvent[]
}

model PatientProfile {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  location                 String?
  dateOfBirth              DateTime?
  gender                   String?
  height                   Float?
  weight                   Float?
  onDialysis               Boolean   @default(false)
  dialysisSessionsPerWeek  Int?
  dialysisStartDate        DateTime?
  dialysisType             String?
  liverDiseaseType         String?
  diagnosisDate            DateTime?
  transplantCandidate      Boolean   @default(false)
  transplantListDate       DateTime?
  alcoholUse               String?
  smokingStatus            String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  primaryPhysician         String?
  hepatologist             String?
  transplantCenter         String?
  preferredUnits           String    @default("US")
  timezone                 String    @default("UTC")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  completedAt              DateTime?
  ascites                  String?   @default("none")
  encephalopathy           String?   @default("none")
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ReportFile {
  id            String            @id @default(cuid())
  userId        String
  objectKey     String
  contentType   String
  reportType    String?
  reportDate    DateTime?
  createdAt     DateTime          @default(now())
  extractedJson Json?
  metrics       ExtractedMetric[]
  user          User              @relation(fields: [userId], references: [id])
  events        TimelineEvent[]
}

model ExtractedMetric {
  id               String     @id @default(cuid())
  reportId         String
  name             String
  value            Float?
  unit             String?
  createdAt        DateTime   @default(now())
  category         String?
  textValue        String?
  conversionDate   DateTime?
  conversionFactor Float?
  conversionRule   String?
  originalUnit     String?
  originalValue    Float?
  validationNotes  String?
  validationStatus String?
  wasConverted     Boolean    @default(false)
  report           ReportFile @relation(fields: [reportId], references: [id])
}

model TimelineEvent {
  id         String      @id @default(cuid())
  userId     String
  type       String
  reportId   String?
  details    Json?
  occurredAt DateTime    @default(now())
  report     ReportFile? @relation(fields: [reportId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model ReportType {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PdfExport {
  id          String    @id @default(cuid())
  userId      String
  objectKey   String
  title       String
  dateRange   String?
  reportIds   String[]
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  accessCount Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  action       String
  resourceType String
  resourceId   String?
  details      Json?
  timestamp    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])
}

enum ShareType {
  COMPLETE_PROFILE
  SPECIFIC_REPORTS
  CONSULTATION_PACKAGE
}

model ShareLink {
  id                String        @id @default(cuid())
  token             String        @unique // 32-character cryptographically secure token
  userId            String
  shareType         ShareType     @default(COMPLETE_PROFILE)
  title             String
  description       String?
  
  // Content Selection
  reportIds         String[]      // Specific reports to include (empty = all)
  includeProfile    Boolean       @default(true)
  includeDashboard  Boolean       @default(true)
  includeScoring    Boolean       @default(true)
  includeAI         Boolean       @default(true)
  includeFiles      Boolean       @default(true)
  
  // Access Control
  expiresAt         DateTime
  maxViews          Int?          // Optional view limit
  currentViews      Int           @default(0)
  password          String?       // Optional bcrypt hashed password
  allowedEmails     String[]      // Specific healthcare provider emails
  
  // Status & Metadata
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastAccessedAt    DateTime?
  
  // Relationships
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessLogs        ShareAccess[]
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model ShareAccess {
  id              String    @id @default(cuid())
  shareLinkId     String
  ipAddress       String
  userAgent       String
  accessedAt      DateTime  @default(now())
  viewDuration    Int?      // Duration in seconds
  actionsPerformed Json?    // Track what was viewed/downloaded
  
  shareLink       ShareLink @relation(fields: [shareLinkId], references: [id], onDelete: Cascade)
  
  @@index([shareLinkId])
  @@index([accessedAt])
}
