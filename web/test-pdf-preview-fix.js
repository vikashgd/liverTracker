#!/usr/bin/env node

/**
 * Test PDF Preview Fix
 * 
 * This script tests if the PDF preview fix is working
 */

const { PrismaClient } = require('./src/generated/prisma');

async function testPdfPreviewFix() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîß Testing PDF preview fix...\n');
    
    // Find the specific report
    const report = await prisma.reportFile.findFirst({
      where: {
        objectKey: {
          contains: '1756967307128-210-YASODA'
        }
      }
    });
    
    if (!report) {
      console.log('‚ùå Report not found');
      return;
    }
    
    console.log('üìã Report details:');
    console.log(`   ID: ${report.id}`);
    console.log(`   Object Key: ${report.objectKey}`);
    console.log(`   Content Type: ${report.contentType}\n`);
    
    const encodedKey = encodeURIComponent(report.objectKey);
    const fileApiUrl = `http://localhost:3000/api/files/${encodedKey}`;
    
    console.log('üîß Changes made to fix PDF preview:');
    console.log('   ‚úÖ Modified file API route to proxy content instead of redirect');
    console.log('   ‚úÖ Added proper headers for iframe embedding');
    console.log('   ‚úÖ Added X-Frame-Options: SAMEORIGIN');
    console.log('   ‚úÖ Added CORS headers for cross-origin requests');
    console.log('   ‚úÖ Added HEAD method support for file existence checks');
    console.log('   ‚úÖ Added better error logging in PDF component\n');
    
    console.log('üß™ Testing steps:');
    console.log('   1. Start the development server: npm run dev');
    console.log(`   2. Visit the report page: http://localhost:3000/reports/${report.id}`);
    console.log('   3. Look for "Original Document" section');
    console.log('   4. PDF should now load inline in the iframe');
    console.log('   5. Check browser console for debug logs\n');
    
    console.log('üîç Debug information:');
    console.log(`   ‚Ä¢ File API URL: ${fileApiUrl}`);
    console.log(`   ‚Ä¢ Iframe src: ${fileApiUrl}#toolbar=0&navpanes=0&scrollbar=0`);
    console.log('   ‚Ä¢ The API now proxies file content instead of redirecting');
    console.log('   ‚Ä¢ This should fix iframe embedding issues with PDFs\n');
    
    console.log('üìä Expected behavior:');
    console.log('   ‚úÖ PDF loads inline in the preview area');
    console.log('   ‚úÖ No "PDF could not be loaded" error message');
    console.log('   ‚úÖ Zoom button opens full-screen PDF viewer');
    console.log('   ‚úÖ Download button works correctly');
    console.log('   ‚úÖ Console shows successful loading logs\n');
    
    console.log('üö® If still not working, check:');
    console.log('   ‚Ä¢ Browser console for any JavaScript errors');
    console.log('   ‚Ä¢ Network tab for failed API requests');
    console.log('   ‚Ä¢ GCS credentials and bucket permissions');
    console.log('   ‚Ä¢ File actually exists in GCS bucket');
    
  } catch (error) {
    console.error('‚ùå Error testing PDF preview fix:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testPdfPreviewFix().catch(console.error);